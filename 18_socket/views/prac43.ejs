<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>채탱창UI만들기</title>
    <!-- socket.io cdn -->
    <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>
    <style>
        *{
            margin: 0;
            padding: 0;
        }
        .entry-box{
            display : flex;
            justify-content: center;
        }
        .chat-box{
            width: 36%;
            height: 500px;
            padding: 10px;
            margin: 0 auto;
        }
        #chat-list{
            background-color: skyblue;
            height : 90%;
            display: flex;
            flex-direction: column;
            overflow: auto;
        }
        .my-chat{
            display: flex;
            justify-content: flex-end;
        }
        .my-chat div{
            background: yellow;
            display: inline-block;
            margin: 10px;
            padding: 5px;
            max-width: 80%;
        }
        .other-chat{
            display: flex;
            justify-content: flex-start;
        }
        .other-chat div{
            background: white;
            display: inline-block;
            margin: 10px;
            padding: 5px;
            max-width: 80%;
        }
        .notice{
            text-align: center;
            color: navy;
            font-size: 12px;
        }
        #text{
            margin: 2px 0;
        }
        .d-none{
            display : none;
        }
        .secret-chat div{
            background-color: rgb(252, 212, 219);
        }
        .time{
            display: inline-block;
        }
    </style>
</head>
<body>
    <!-- 실습[44-2]채팅창 입장 문구 안내 socket.io -> nickname -->
    <div class = "entry-box">
        <input type = "text" id = "nickname" placeholder="닉네임" autofocus>
        <button type = "button" onclick = "entry();">입장</button>
    </div>


    <div class = "chat-box d-none">
        <div id = "chat-list" class = "chat-list">
            <!-- [실습43] 임시 대화 데이터 -->
            <!-- <div class = "my-chat">
                <div>user1 : msg1</div>
            </div>

            <div class = "other-chat">
                <div>user2 : msg2</div>
            </div>

            <div class = "notice">xx가 입장했습니다.</div> -->
        </div>
    
        <div id = "text">
            <select id = "nick-list">
                <!-- <option value = "all">전체</option>
                <option value = "socketId1">nick1</option>
                <option value = "socketId2">nick2</option> -->
            </select>에게

            <input type = "text" id = "message">
            <button type = "button" onclick = send();>전송</button>
        </div>

    </div>

    
    <script>
        let socket = io.connect();//소켓 사용을 위한 객체 생성.
        let myNick; //내 닉네임 설정
        
        socket.on('connect', () => {//서버와 클라이어크가 서로 연결이 되었을 때
            console.log('****client socket connectedo*****', socket.id);
        });


        //실습[44]
        
        socket.on('notice', (msg) => {
            console.log('socket on notice >> ', msg);

            //아래코드에서의 ${msg}는 = `${socket.id.slice(0,5)}님이 입장하셨습니다.`);를 의미.
            document.querySelector('#chat-list').insertAdjacentHTML('beforeend', `<div class = "notice">${msg}</div>`)
        });
        


        //실습[44-2] 채팅창 입장 안내 문구 socket.io -> nickname
        function entry(){
            //위 body태그 안에서 선언한 input 태그. 
            //사용자가 input 태그에 자신의 nickname을 적고, 그 값(#input태그.value)을 
            //서버에 보낸다.
            //그럼 서버는 그 nickname을 받아 중복이 있는지 확인 후 중복되지 않는다면
            //nickname을 화면에 출력하도록 한다.
            console.log(document.querySelector('#nickname').value);

            //socket.emit이 보내는 건 -> socket.on('setNick', (nick) => { 로 받는다.
            //document.querySelector('#nickname').value = nick
            socket.emit('setNick', document.querySelector('#nickname').value);
        }

        socket.on('entrySuccess', (nick) => {
            console.log(nick);
            myNick = nick; //벡으로 받은 nick을 myNick에 저장.

            //입장에 성공하면 입장을 제한 -> 비활성화
            document.querySelector('#nickname').disabled = true;
            //[입장]버튼 비활성화
            document.querySelector('.entry-box > button').disabled = true;

            //채팅박스 보여줌
            //넥네임이 입력되어야 채팅박스가 보여지도록 함.
            document.querySelector('.chat-box').classList.remove('d-none');
        })

        //'error' 이벤트 받기 -> on
        socket.on('error', (data) => {
            alert(data);
        })


        //[실습45] 채탕창 메세지 전송 step1
        function send(){

            const data = {
                myNick: myNick, //myNick은 nick이 들어있다. //"entrySuccess" 이벤트에서 입장 성공시 설정하는 내 닉네임
                msg: document.querySelector('#message').value,
                dm: document.querySelector('#nick-list').value, //현재 선택된 select 태그의 option 값//dm여부
            }

            console.log("dm >> ", data.dm);

            socket.emit('send', data); 
        }

        //[실습45] 채팅창 메세지 전송 step2
        //"newMessage" 이벤트를 전달받기(닉네임 , 메세지내용)
        socket.on('newMessage', (data) => {//여기서 data는 {nick: data.myNick, msg: data.msg};
            console.log('socket on newMessage >> ', data);

            /*<div class = "my-chat">
                <div>user1 : msg1</div>
            </div>

            <div class = "other-chat">
                <div>user2 : msg2</div>
            </div>

            <div class = "notice">xx가 입장했습니다.</div> */
            let chatList = document.querySelector('#chat-list'); //#chat-list 선택
            let div = document.createElement('div'); // .my-chat or .other-chat
            let divChat = document.createElement('div'); //가장 안쪽 div(메세지 가스 )생성
            

            //새 메세지(data => {nick: 'a', msg: 'hello'})가 도착했는데
            //myNick에 저장된 현재 내 닉네임과
            //새 메세지(data)이 nick이 같다면, 내가 보낸 채팅
            //새 메세지(data)의 nick이 다르면, 상대방이 보낸 채팅
            if(myNick == data.nick){
                div.classList.add('my-chat'); //<div class = "my-chat">
            }else{ //내가 보낸 거와 닉네임이 다르다면 다른사람이 보낸 채팅.
                    div.classList.add('other-chat');
            }

            //[실습46] DM기능추가
            console.log('send data check >> ', data);
            //dm : {nick: 'a', msg: 'xx', dm: (속닥속닥)}
            //전체: {nick: 'a', msg: 'xx'}

            if(data.dm){
                //data.dm이 있다면
                div.classList.add('secret-chat'); //css 적용을 위해서
                divChat.textContent = data.dm; //data.dm = "(속닥속닥)"
            }


            divChat.textContent =  divChat.textContent + `${data.nick} : ${data.msg}`; //<div>nick : msg</div>
            div.append(divChat);
            chatList.append(div);

            chatList.scrollTop = chatList.scrollHeight;




            //#########################################
            //[기능추가-시간]
            let nowTime = new Date();
            console.log(nowTime);
            
            let hours = ('0' + nowTime.getHours()).slice(-2);
            let minutes = ('0' + nowTime.getMinutes()).slice(-2);

            let printTime = `${hours}:${minutes}`

            console.log('현재 시간: >>', printTime);


            let timeDiv = document.createElement('div');
            timeDiv.classList.add('time');
            timeDiv.innerHTML = printTime;

            chatList.append(timeDiv);
        })
            




            //#####엔터키 치면 채팅문자 등록
            
            
            document.getElementById("message")
            .addEventListener('keydown', function(event){

                if(event.keyCode == 13){
                   send();
                   document.querySelector("#message").value = "";
                }
            })

            /*
            $('#message').keydown(function(event){
                if(event.which == 13){
                    entry();
                    clearInput();
                }
            })
            */
            
            /*$('#message').keypress(function(event){
                if(event.which == 13){
                    entry();
                }
            })*/


        //[실습46]
        socket.on('updateNicks', (nickArray) => {
            console.log("socket on updateNicks >> ", nickArray);
            console.log('update->socket.id', Object.keys(nickArray)); //객체로 저장된다.
            console.log('update->nick', Object.values(nickArray)); //배열로 저장된다.
            console.log('nickArray.length >>', Object.keys(nickArray).length);


            //미션!!!!!
            //nickArray에 퇴장 입장이 될 떄마다 객체가 바뀌고 있다. 그걸 반영해
            //<option value = "all">전체</option>
            // <option value = "socketId1">nick1</option>
            // <option value = "socketId2">nick2</option>
            //유저 목록 하나하나를 option태그로 만들어서 select에 추가
            let option = `<option value = "all">전체</option>`;
            let select = document.querySelector('#nick-list');

            //1. 반복문 사용해서 option 태그 하나하나 완성
            //2. select 태그에 option 태그들을 추가

            for(const nick in nickArray){ //for(let i = 1; i < Object.keys(nickArray).length; i++){
                //socket.in : nick
                console.log(`${nick}, ${nickArray[nick]}`); // bw2X507guPuI5pCRAAAB, s

                //선생님 코드
                console.log(`<option value = "${nick}">${nickArray[nick]}</option>`);

                option += `<option value="${nick}">${nickArray[nick]}</option>`; // x += 1
                document.querySelector('#nick-list').innerHTML = option;
                /*내코드
                let option = document.createElement('option');
                option.innerHTML = `${nickArray[nick]}`;
                option.setAttribute('value', `${nick}`);
                console.log('option 확인 >> ', option);
                
                select.append(option);
                console.log('select 추가 확인', select);
                */
            }

        })

    </script>

</body>
</html>